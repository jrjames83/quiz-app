{"version":3,"sources":["Helpers/Contexts.js","components/MainMenu.js","Helpers/QuestionBank.js","components/Quiz.js","Helpers/Definitions.js","components/DefRater.js","components/EndScreen.js","components/DefEndScreen.js","App.js","reportWebVitals.js","index.js"],"names":["QuizContext","createContext","MainMenu","useContext","setGameState","gameState","className","style","position","left","top","transform","onClick","Questions","prompt","answers","id","value","correctId","activeId","kind","Quiz","score","setScore","useState","currentQuestion","setCurrentQuestion","optionChosen","setOptionChosen","selectedAnswer","setSelectedAnswer","map","ans","answerId","console","log","length","Definitions","term","defs","grade","DefRater","activeTerm","likedDefs","setActiveTerm","setLikedDefs","altDefIndex","setAltDefIndex","alternativeDefinitions","filter","defObject","advanceDefintion","liked","Row","Col","EndScreen","DefEndScreen","closeQuiz","def","Form","Check","type","label","shuffle","require","App","scrambled","setScrambled","isScrambled","termDefs","modifyTermDefs","useEffect","x","original","split","join","Image","src","fluid","Container","Button","newState","item","tempRow","push","toggleScramble","clearScramble","t","idx","Card","width","height","Text","variant","index","i","unScrambleDefByIndex","Provider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0a82beb8.chunk.js","sourcesContent":["import {createContext} from 'react'\n\nexport const QuizContext = createContext();\n//export const DefsContext = createContext();","import React, {useContext} from 'react'\nimport {QuizContext} from '../Helpers/Contexts';\nimport '../App.css';\n\nexport default function MainMenu() {\n    const {gameState, setGameState} = useContext(QuizContext)\n    return (\n        <div className=\"Menu\" style={{\n            position: 'absolute', left: '50%', top: '50%',\n            transform: 'translate(-50%, -50%)'\n        }}>\n            <h4>Swipe through the definitions</h4>\n            <button onClick={() => {setGameState('defRater')}}>\n                Push to start\n            </button>\n        </div>\n    )\n}\n","export const Questions = [\n    // What would make a good term level distractor?\n    // Definition contains the term?\n    // Grade level similar?\n\n    {\n        prompt: 'long arm of chromosome',\n        answers: [ {id: 1,  value: \"q arm\"}, {id: 2,  value: \"p arm\"}, {id: 3,  value: \"telomere\"} ],\n        correctId: 1,\n        activeId: null,\n        kind: 'mcq_fitb'\n    },\n    {\n        prompt: 'humans have 46 _____',\n        answers: [ {id: 1,  value: \"autosomes\"}, {id: 2,  value: \"chromosomes\"}, {id: 3,  value: \"base pairs\"} ],\n        correctId: 2,\n        activeId: null,\n        kind: 'mcq'  \n    },\n    {\n        prompt: 'chromosomes are classified according to the relative position of their ________',\n        answers: [ {id: 1,  value: \"karyotype\"}, {id: 2,  value: \"centromeres\"}, {id: 3,  value: \"chromosome rearrangement\"} ],\n        correctId: 2,\n        activeId: null\n    }      \n]","import React, {useState, useContext} from 'react';\nimport {Questions} from '../Helpers/QuestionBank';\nimport {QuizContext} from '../Helpers/Contexts';\n\nexport default function Quiz() {\n    const {score, setScore, setGameState} = useContext(QuizContext);\n    const [currentQuestion, setCurrentQuestion] = useState(0);\n    const [optionChosen, setOptionChosen] = useState(\"\");\n    const [selectedAnswer, setSelectedAnswer] = useState(10);\n\n    const nextQuestion = () => {\n        if (Questions[currentQuestion].correctId == optionChosen) {\n            setScore(score + 1);            \n        }\n        setCurrentQuestion(currentQuestion + 1);\n        setSelectedAnswer(10)\n    }\n\n    const finishQuiz = () => {\n        if (Questions[currentQuestion].correctId == optionChosen) {\n            setScore(score + 1);            \n        }\n        setSelectedAnswer(10)\n        setGameState('endScreen')\n    }\n\n    const handleClick = (answerId) => {\n        console.log('clicked', answerId)\n        setSelectedAnswer(answerId);\n    }\n\n\n    return (\n        <div className='Quiz' style={{\n            position: 'absolute', left: '50%', top: '50%',\n            transform: 'translate(-50%, -50%)'\n        }}>\n            <h1>{Questions[currentQuestion].prompt}</h1>\n            <div className=\"options\">\n                {Questions[currentQuestion].answers.map(ans => (\n                    <button key={ans.id} \n                            className={ans.className + (ans.id === selectedAnswer ? \" active_item\" : \"\")}\n                            onClick={() => {setOptionChosen(ans.id); handleClick(ans.id) }}>\n                        {ans.value}\n                    </button>\n                ))}\n            </div>\n            {currentQuestion == Questions.length - 1 ? (\n                <button onClick={() => finishQuiz()}>Finish Quiz</button>\n            ) : (\n                <button onClick = {() => {nextQuestion()}}>Next Question</button>\n            )}\n             \n        </div>\n    )\n}\n","    // What would make a good term level distractor?\n    // Definition contains the term?\n    // Grade level similar?\n\n\nexport const Definitions = [\n    {\n        term: 'interphase',\n        defs: [ {id: 1,  value: \"phase before mitosis; growth of cell and preparation for division\", grade: \"hs\"}, \n                {id: 2,  value: \"the part of the cell cycle is not dividing\", grade: \"hs\"}, \n                {id: 3,  value: \"cell grows, performs its normal functions, and prepares for division\", grade: \"hs\"}, \n                {id: 4,  value: \"cell grows, dna is copied and new organelles form\", grade: \"college_bound\"}, \n                {id: 5,  value: \"cell preparing for mitosis, chromosomes not discernible, nucloulus visible\", grade: \"hs\"}\n            ]\n    },\n    {\n        term: 'chromosome',\n        defs: [ {id: 1,  value: \"a threadlike, gene-carrying structure found in the nuclus, each chromosome consists of one very long dna molecule plus associated proteins\", grade: \"college_bound\"}, \n                {id: 2,  value: \"condensed threads of genetic material formed from chromatin as a cell prepares to divide\", grade: \"hs\"}, \n                {id: 3,  value: \"in a eukarayotic cell, one of the structures in the nucleus that are made up of dna and protein; in a prokaryotic cell, the main ring of dna\", grade: \"college\"}, \n                {id: 4,  value: \"dna coiled around and supported by proteins, found in the nucleus of the cell\", grade: \"hs\"}, \n                {id: 5,  value: \"coiled chromatin, 46 are found in human body cells\", grade: \"hs\"} ,\n                {id: 6,  value: \"a single piece of coiled dna found in the cells; contains genes that encode traits\", grade: \"hs\"},\n                {id: 7,  value: \"a single long molecule of dna wound around proteins called histones\", grade: \"college\"}\n            ]\n    },\n    {\n        term: 'mitosis',\n        defs: [ {id: 1,  value: \"splitting of the nucleus\", grade: \"hs\"}, \n                {id: 2,  value: \"cell division in which the nucelus divides into nuclei containing the same number of chromasomes\", grade: \"college_bound\"}, \n                {id: 3,  value: \"part of eukaryotic cell division during which the cell nucleus divides\", grade: \"college_bound\"}, \n                {id: 4,  value: \"a process of nucleur division in eukaryotic cells conventionally divided into five stages: prophase, prometaphase, metaphase, anaphase and telophase, mitosis conserves chromsome number by allocating replicated chromsomes equally to each of the daughter nucleii\", grade: \"college\"}, \n                {id: 5,  value: \"a process of asexual production in eukaryotic cells\", grade: \"college_bound\"}, \n                {id: 6,  value: \"division of the nucleus or chromosomes; creates two genetically identical cells\", grade: \"college_bound\"},\n                {id: 7,  value: \"1 diploid parent cell splits into 2 identical diploid daughter cells\", grade: \"college\"}\n            ]\n    }   \n]","import React, {useState, useContext} from 'react';\nimport {Definitions} from '../Helpers/Definitions';\nimport {QuizContext} from '../Helpers/Contexts';\nimport Button from \"react-bootstrap/Button\";\nimport { FaThumbsUp, FaThumbsDown } from \"react-icons/fa\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\n\n\nexport default function DefRater() {\n    const {gameState, setGameState, activeTerm, setActiveTerm, likedDefs, setLikedDefs } = useContext(QuizContext);\n    const [altDefIndex, setAltDefIndex] = useState(0);\n\n    // Get the array of alternative definitions for the activeDef\n    // type: array of objects\n    const alternativeDefinitions = Definitions.filter(defObject => {\n        return defObject.term == activeTerm;\n    })[0].defs\n\n    const advanceDefintion = (liked) => {\n        if (liked) setLikedDefs([...likedDefs, alternativeDefinitions[altDefIndex].value ]); \n        if (altDefIndex < alternativeDefinitions.length - 1) {\n            setAltDefIndex(altDefIndex + 1);\n        } else {\n            console.log('ended')\n            setGameState('defEndScreen')\n        }\n    }\n\n\n    return (\n        <div className='Quiz' style={{\n            position: 'absolute', left: '50%', top: '50%',\n            transform: 'translate(-50%, -50%)'\n        }}>\n            <h4 className=\"p-2\">{activeTerm}</h4>\n            <p className=\"p-2\">\n                {alternativeDefinitions[altDefIndex].value}\n            </p>\n            <Row>\n                <Col className=\"p-2\"><FaThumbsUp onClick={() => advanceDefintion(true)} /></Col>\n                <Col className=\"p-2\"><FaThumbsDown onClick={() => advanceDefintion(false)} /></Col>\n            </Row>\n        </div>\n    )\n}\n","import React, {useContext} from 'react'\nimport {QuizContext} from '../Helpers/Contexts';\nimport {Questions} from '../Helpers/QuestionBank';\nimport '../App.css';\n\nexport default function EndScreen() {\n    const {score, setScore, setGameState} = useContext(QuizContext);\n    const restartQuiz = () => {\n        setScore(0);\n        setGameState(\"menu\")\n    }\n\n    const closeQuiz = () => {\n        setGameState('none')\n    }\n    return (\n        <div className='endScreen' style={{\n            position: 'absolute', left: '50%', top: '50%',\n            transform: 'translate(-50%, -50%)'\n        }}>\n            <h1>Quiz Complete! Nice work</h1>\n            <h3>{score} / {Questions.length} Correct!</h3>\n            <button onClick={() => restartQuiz() }>Restart Quiz</button>\n            <button onClick={() => closeQuiz() }>Close Quiz</button>\n        </div>\n    )\n}\n","import React, {useContext} from 'react'\nimport {QuizContext} from '../Helpers/Contexts';\nimport {Questions} from '../Helpers/QuestionBank';\nimport {Definitions} from '../Helpers/Definitions';\nimport '../App.css';\nimport Form from 'react-bootstrap/Form';\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\n\n\nexport default function DefEndScreen() {\n    const {gameState, setGameState, activeTerm, setActiveTerm, likedDefs, setLikedDefs } = useContext(QuizContext);\n\n    const alternativeDefinitions = Definitions.filter(defObject => {\n        return defObject.term == activeTerm;\n    })[0].defs    \n\n    const closeQuiz = () => {\n        // Reset game state and other things\n        setGameState('none')\n        setActiveTerm('none')\n        setLikedDefs([])\n    }\n\n    return (\n        <div className='DefEndScreen' style={{\n            position: 'absolute', left: '50%', top: '50%',\n            transform: 'translate(-50%, -50%)'\n        }}>\n            <h3 className=\"p-2\">Ain't learning fun?</h3>\n            <p>You studied {alternativeDefinitions.length} definitions for {activeTerm}.</p>\n            <h5 >Click to add ones you liked to a new set</h5>\n            <ul>\n            {likedDefs.map(def => \n                 <Form.Check type=\"checkbox\" label={def} />\n                )}\n            </ul>    \n            <Row>\n                <Col><button onClick={() => closeQuiz()}>Save 'em</button></Col>\n                <Col><button onClick={() => closeQuiz()}>Back to Set</button></Col>\n            </Row>\n            \n            \n        </div>\n    )\n}\n","import \"./App.css\";\nimport React, { useState, useContext, useEffect} from \"react\";\nimport MainMenu from \"./components/MainMenu\";\nimport Quiz from \"./components/Quiz\";\nimport DefRater from \"./components/DefRater\";\nimport EndScreen from \"./components/EndScreen\";\nimport { QuizContext } from \"./Helpers/Contexts\";\n\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Card from \"react-bootstrap/Card\";\nimport Image from \"react-bootstrap/Image\";\nimport Button from \"react-bootstrap/Button\";\nimport DefEndScreen from \"./components/DefEndScreen\";\n\nvar shuffle = require('shuffle-array')\n\nfunction App() {\n  const [gameState, setGameState] = useState(\"hidden\");\n  const [activeTerm, setActiveTerm] = useState(\"\");\n  const [likedDefs, setLikedDefs] = useState([]);\n  const [score, setScore] = useState(0);\n  const [scrambled, setScrambled] = useState(false);\n\n  const [termDefs, modifyTermDefs] = useState([\n    {term: \"interphase\", def: \"phase of the cell cycle where the cell grows, replicates DNA then grows again\", isScrambled: false },\n    {term: \"chromosome\", def: \"the main ring of DNA in a prokaryotic cell or one of multiple structures made of DNA in a eukaryotic cell\", isScrambled: false },\n    {term: \"mitosis\", def: \"cell division in a eukaryote that produces two new nuclei which each have the same number of chromosomes as the original cell\", isScrambled: false }\n  ])\n\n  useEffect(() => {\n    const scrambled = termDefs.map(x => {\n       let original = x; \n       let scrambled = shuffle(x.def.split(' '))\n       original.scrambled = scrambled.join(' '); \n       return original;\n    })\n    modifyTermDefs(scrambled)\n  }, []) // runs on componentDidMount basically\n\n  const toggleScramble = () => {\n    let newState = [];\n    let modified = termDefs.map(item => {\n        let tempRow = item; \n        tempRow.isScrambled = !tempRow.isScrambled;\n        newState.push(tempRow)\n    })\n    modifyTermDefs(newState)\n    setScrambled(!scrambled);\n  }\n\n  const unScrambleDefByIndex = (index) => {\n    let newState = [];\n    let modified = termDefs.map((item ,i) => {\n        if (i == index) {\n          let tempRow = item; \n          tempRow.isScrambled = !tempRow.isScrambled;\n          newState.push(tempRow)\n        } else {\n          newState.push(item)\n        }\n    })\n    modifyTermDefs(newState)\n  }\n\n  const clearScramble = () => {\n    let newState = [];\n    let modified = termDefs.map(item => {\n        let tempRow = item; \n        tempRow.isScrambled = false;\n        newState.push(tempRow)\n    })\n    modifyTermDefs(newState)\n    setScrambled(false);\n  }\n\n\n\n  // or flip througb multiple definitions and rate them, or add to another set!\n  // https://stackoverflow.com/questions/55518798/how-to-add-active-class-to-clicked-item-in-reactjs\n  // which is a good FITB candidate?\n  // # then order by length, game could be place the 2 masked words!  ___ and ___ are part of the [a) one word, b) another word]\n\n\n  return (\n    <div className=\"App\">\n      <h1>Unit Four Cell Cycle, Mitosis, and DNA</h1>\n      <Image src=\"https://via.placeholder.com/500x200\" fluid />\n\n\n      <Container>\n        <Row>\n          <Col className=\"col-md-2\"></Col>\n          <Col><h3 className=\"p-2\">What's this about?</h3>\n          <p>This is a set page prototype that describes 2 kinds of study behaviors we could consider to \n            augment the current set-page experience. I'm calling this \"mid funnel\" studying, which is widely applicable to almost any user segment who doesn't actively use our advanced modes. </p>\n            <ul>\n              <li>First, we can drill the word side by letting users rate our alternate definitions, later adding to a set</li>\n              <li>Secondly, to prevent \"just reading\" the definition, we can enable scramble mode, allowing them to stare at \n                an assortment of words, rather than the entire definition, and unscramble if they need help. \n              </li>\n            </ul>\n            </Col>\n            <Col className=\"col-md-2\"></Col>\n          \n\n          \n        </Row>\n        <Row>\n          <Col >\n            <Button className=\"float-right\" \n                // onClick = {() => toggleScramble()}>{scrambled ? 'Unscramble': 'Scramble'}\n                onClick = {() => toggleScramble()}>{scrambled ? 'Unscramble': 'Scramble'}\n            </Button>\n            {\n              scrambled ? <Button className=\"float-right\" onClick = {() => clearScramble()}>Reset</Button> : null\n            }\n                        \n          </Col>\n        </Row>\n        {termDefs.map((t, idx) => (\n        <Row className=\"pt-5\">\n        <Col>\n          <Card style={{ width: 'auto', height:'8rem' }} className=\"mx-auto justify-content-center\">\n            <Card.Text  className=\"mx-auto p-2\"><h4>{t.term}</h4></Card.Text>\n            <Button onClick={() => {setGameState('menu'); setActiveTerm(t.term)}} \n                    className=\"mx-auto\" style={{  width: '5rem', height:'2rem'}} variant=\"primary\">\n                    Drill\n            </Button>\n          </Card>          \n        </Col>\n        <Col>\n        <Card style={{  width: 'auto', height:'8rem' }} className=\"mx-auto justify-content-center\" >\n        <Card.Text className=\"mx-auto p-2\">{t.isScrambled ? t.scrambled : t.def}</Card.Text>\n            {t.isScrambled ? \n              <Button className=\"mx-auto\" \n              style={{  width: 'auto', height:'2rem'}} \n              variant=\"primary\"\n              onClick = {() => unScrambleDefByIndex(idx)}\n              >Unscramble</Button> : null\n            }\n          </Card>            \n        </Col>\n      </Row>\n        ))}\n      </Container>\n\n      <QuizContext.Provider\n        value={{ gameState, setGameState, activeTerm, setActiveTerm, likedDefs, setLikedDefs}}\n      >\n        {gameState === \"menu\" && <MainMenu  />}\n        {gameState === \"quiz\" && <Quiz />}\n        {gameState === \"defRater\" && <DefRater />}\n        {gameState === \"endScreen\" && <EndScreen />}\n        {gameState === \"defEndScreen\" && <DefEndScreen />}\n      </QuizContext.Provider>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}