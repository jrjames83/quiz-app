{"version":3,"sources":["Helpers/Contexts.js","components/MainMenu.js","Helpers/QuestionBank.js","components/Quiz.js","components/EndScreen.js","App.js","reportWebVitals.js","index.js"],"names":["QuizContext","createContext","MainMenu","useContext","setGameState","gameState","className","style","position","left","top","transform","onClick","Questions","prompt","answers","id","value","correctId","activeId","kind","Quiz","score","setScore","useState","currentQuestion","setCurrentQuestion","optionChosen","setOptionChosen","selectedAnswer","setSelectedAnswer","map","ans","answerId","console","log","length","EndScreen","shuffle","require","App","scrambled","setScrambled","term","def","termDefs","modifyTermDefs","useEffect","x","original","split","join","Image","src","fluid","Container","Row","Col","Button","t","Card","width","height","Text","variant","Provider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4MAEaA,G,MAAcC,2B,OCEZ,SAASC,IAAY,IAAD,EACGC,qBAAWH,GAA3BI,GADa,EACxBC,UADwB,EACbD,cAClB,OACI,qBAAKE,UAAU,OAAOC,MAAO,CACzBC,SAAU,WAAYC,KAAM,MAAOC,IAAK,MACxCC,UAAW,yBAFf,SAII,wBAAQC,QAAS,WAAOR,EAAa,SAArC,0BCXL,IAAMS,EAAY,CAKrB,CACIC,OAAQ,yBACRC,QAAS,CAAE,CAACC,GAAI,EAAIC,MAAO,SAAU,CAACD,GAAI,EAAIC,MAAO,SAAU,CAACD,GAAI,EAAIC,MAAO,aAC/EC,UAAW,EACXC,SAAU,KACVC,KAAM,YAEV,CACIN,OAAQ,uBACRC,QAAS,CAAE,CAACC,GAAI,EAAIC,MAAO,aAAc,CAACD,GAAI,EAAIC,MAAO,eAAgB,CAACD,GAAI,EAAIC,MAAO,eACzFC,UAAW,EACXC,SAAU,KACVC,KAAM,OAEV,CACIN,OAAQ,kFACRC,QAAS,CAAE,CAACC,GAAI,EAAIC,MAAO,aAAc,CAACD,GAAI,EAAIC,MAAO,eAAgB,CAACD,GAAI,EAAIC,MAAO,6BACzFC,UAAW,EACXC,SAAU,OCnBH,SAASE,IAAQ,IAAD,EACalB,qBAAWH,GAA5CsB,EADoB,EACpBA,MAAOC,EADa,EACbA,SAAUnB,EADG,EACHA,aADG,EAEmBoB,mBAAS,GAF5B,mBAEpBC,EAFoB,KAEHC,EAFG,OAGaF,mBAAS,IAHtB,mBAGpBG,EAHoB,KAGNC,EAHM,OAIiBJ,mBAAS,IAJ1B,mBAIpBK,EAJoB,KAIJC,EAJI,KA4B3B,OACI,sBAAKxB,UAAU,OAAOC,MAAO,CACzBC,SAAU,WAAYC,KAAM,MAAOC,IAAK,MACxCC,UAAW,yBAFf,UAII,6BAAKE,EAAUY,GAAiBX,SAChC,qBAAKR,UAAU,UAAf,SACKO,EAAUY,GAAiBV,QAAQgB,KAAI,SAAAC,GAAG,OACvC,wBACQ1B,UAAW0B,EAAI1B,WAAa0B,EAAIhB,KAAOa,EAAiB,eAAiB,IACzEjB,QAAS,WAhBb,IAACqB,EAgBmBL,EAAgBI,EAAIhB,IAhBvCiB,EAgBwDD,EAAIhB,GAf7EkB,QAAQC,IAAI,UAAWF,GACvBH,EAAkBG,IAYN,SAGKD,EAAIf,OAHIe,EAAIhB,SAOxBS,GAAmBZ,EAAUuB,OAAS,EACnC,wBAAQxB,QAAS,kBA7BrBC,EAAUY,GAAiBP,WAAaS,GACxCJ,EAASD,EAAQ,GAErBQ,EAAkB,SAClB1B,EAAa,cAyBL,yBAEA,wBAAQQ,QAAW,WAvCvBC,EAAUY,GAAiBP,WAAaS,GACxCJ,EAASD,EAAQ,GAErBI,EAAmBD,EAAkB,GACrCK,EAAkB,KAmCV,8BC7CD,SAASO,IAAa,IAAD,EACQlC,qBAAWH,GAA5CsB,EADyB,EACzBA,MAAOC,EADkB,EAClBA,SAAUnB,EADQ,EACRA,aASxB,OACI,sBAAKE,UAAU,YAAYC,MAAO,CAC9BC,SAAU,WAAYC,KAAM,MAAOC,IAAK,MACxCC,UAAW,yBAFf,UAII,0DACA,+BAAKW,EAAL,MAAeT,EAAUuB,OAAzB,eACA,wBAAQxB,QAAS,kBAdrBW,EAAS,QACTnB,EAAa,SAaT,0BACA,wBAAQQ,QAAS,WAVrBR,EAAa,SAUT,2B,kDCTRkC,EAAUC,EAAQ,IA8EPC,MA5Ef,WAAgB,IAAD,EACqBhB,mBAAS,UAD9B,mBACNnB,EADM,KACKD,EADL,OAEaoB,mBAAS,GAFtB,mBAENF,EAFM,KAECC,EAFD,OAGqBC,oBAAS,GAH9B,mBAGNiB,EAHM,KAGKC,EAHL,OAKsBlB,mBAAS,CAC1C,CAACmB,KAAM,aAAcC,IAAK,iFAC1B,CAACD,KAAM,aAAcC,IAAK,6GAC1B,CAACD,KAAM,UAAWC,IAAK,mIARZ,mBAKNC,EALM,KAKIC,EALJ,KA+Bb,OApBAC,qBAAU,WACR,IAAMN,EAAYI,EAASd,KAAI,SAAAiB,GAC5B,IAAIC,EAAWD,EACXP,EAAYH,EAAQU,EAAEJ,IAAIM,MAAM,MAEpC,OADAD,EAASR,UAAYA,EAAUU,KAAK,KAC7BF,KAEVH,EAAeL,KACd,IAaD,sBAAKnC,UAAU,MAAf,UACE,wEACA,cAAC8C,EAAA,EAAD,CAAOC,IAAI,sCAAsCC,OAAK,IAGtD,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CAAQpD,UAAU,cACdM,QAAW,WAnBvB8B,GAAcD,IAkBN,SACwCA,EAAY,aAAc,iBAIrEI,EAASd,KAAI,SAAA4B,GAAC,OACf,eAACH,EAAA,EAAD,CAAKlD,UAAU,OAAf,UACA,cAACmD,EAAA,EAAD,UACE,eAACG,EAAA,EAAD,CAAMrD,MAAO,CAAEsD,MAAO,OAAQC,OAAO,QAAUxD,UAAU,iCAAzD,UACE,cAACsD,EAAA,EAAKG,KAAN,CAAYzD,UAAU,cAAtB,SAAoC,6BAAKqD,EAAEhB,SAC3C,cAACe,EAAA,EAAD,CAAQ9C,QAAS,kBAAMR,EAAa,SAASE,UAAU,UAAUC,MAAO,CAAGsD,MAAO,OAAQC,OAAO,QAASE,QAAQ,UAAlH,wBAGJ,cAACP,EAAA,EAAD,UACA,eAACG,EAAA,EAAD,CAAMrD,MAAO,CAAGsD,MAAO,OAAQC,OAAO,QAAUxD,UAAU,iCAA1D,UACA,cAACsD,EAAA,EAAKG,KAAN,CAAWzD,UAAU,cAArB,SAAoCmC,EAAYkB,EAAElB,UAAYkB,EAAEf,MAC3DH,EACC,cAACiB,EAAA,EAAD,CAAQpD,UAAU,UAAUC,MAAO,CAAGsD,MAAO,OAAQC,OAAO,QAASE,QAAQ,UAA7E,wBAA6G,mBAQrH,eAAChE,EAAYiE,SAAb,CACEhD,MAAO,CAAEZ,YAAWD,eAAckB,QAAOC,YAD3C,UAGiB,SAAdlB,GAAwB,cAACH,EAAD,IACV,SAAdG,GAAwB,cAACgB,EAAD,IACV,cAAdhB,GAA6B,cAACgC,EAAD,WC1EvB6B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,MCCdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.0746bbd0.chunk.js","sourcesContent":["import {createContext} from 'react'\n\nexport const QuizContext = createContext();\nexport const DefsContext = createContext();","import React, {useContext} from 'react'\nimport {QuizContext} from '../Helpers/Contexts';\nimport '../App.css';\n\nexport default function MainMenu() {\n    const {gameState, setGameState} = useContext(QuizContext)\n    return (\n        <div className=\"Menu\" style={{\n            position: 'absolute', left: '50%', top: '50%',\n            transform: 'translate(-50%, -50%)'\n        }}>\n            <button onClick={() => {setGameState('quiz')}}>\n                Start Quiz\n            </button>\n        </div>\n    )\n}\n","export const Questions = [\n    // What would make a good term level distractor?\n    // Definition contains the term?\n    // Grade level similar?\n\n    {\n        prompt: 'long arm of chromosome',\n        answers: [ {id: 1,  value: \"q arm\"}, {id: 2,  value: \"p arm\"}, {id: 3,  value: \"telomere\"} ],\n        correctId: 1,\n        activeId: null,\n        kind: 'mcq_fitb'\n    },\n    {\n        prompt: 'humans have 46 _____',\n        answers: [ {id: 1,  value: \"autosomes\"}, {id: 2,  value: \"chromosomes\"}, {id: 3,  value: \"base pairs\"} ],\n        correctId: 2,\n        activeId: null,\n        kind: 'mcq'  \n    },\n    {\n        prompt: 'chromosomes are classified according to the relative position of their ________',\n        answers: [ {id: 1,  value: \"karyotype\"}, {id: 2,  value: \"centromeres\"}, {id: 3,  value: \"chromosome rearrangement\"} ],\n        correctId: 2,\n        activeId: null\n    }      \n]","import React, {useState, useContext} from 'react';\nimport {Questions} from '../Helpers/QuestionBank';\nimport {QuizContext} from '../Helpers/Contexts';\n\nexport default function Quiz() {\n    const {score, setScore, setGameState} = useContext(QuizContext);\n    const [currentQuestion, setCurrentQuestion] = useState(0);\n    const [optionChosen, setOptionChosen] = useState(\"\");\n    const [selectedAnswer, setSelectedAnswer] = useState(10);\n\n    const nextQuestion = () => {\n        if (Questions[currentQuestion].correctId == optionChosen) {\n            setScore(score + 1);            \n        }\n        setCurrentQuestion(currentQuestion + 1);\n        setSelectedAnswer(10)\n    }\n\n    const finishQuiz = () => {\n        if (Questions[currentQuestion].correctId == optionChosen) {\n            setScore(score + 1);            \n        }\n        setSelectedAnswer(10)\n        setGameState('endScreen')\n    }\n\n    const handleClick = (answerId) => {\n        console.log('clicked', answerId)\n        setSelectedAnswer(answerId);\n    }\n\n\n    return (\n        <div className='Quiz' style={{\n            position: 'absolute', left: '50%', top: '50%',\n            transform: 'translate(-50%, -50%)'\n        }}>\n            <h1>{Questions[currentQuestion].prompt}</h1>\n            <div className=\"options\">\n                {Questions[currentQuestion].answers.map(ans => (\n                    <button key={ans.id} \n                            className={ans.className + (ans.id === selectedAnswer ? \" active_item\" : \"\")}\n                            onClick={() => {setOptionChosen(ans.id); handleClick(ans.id) }}>\n                        {ans.value}\n                    </button>\n                ))}\n            </div>\n            {currentQuestion == Questions.length - 1 ? (\n                <button onClick={() => finishQuiz()}>Finish Quiz</button>\n            ) : (\n                <button onClick = {() => {nextQuestion()}}>Next Question</button>\n            )}\n             \n        </div>\n    )\n}\n","import React, {useContext} from 'react'\nimport {QuizContext} from '../Helpers/Contexts';\nimport {Questions} from '../Helpers/QuestionBank';\nimport '../App.css';\n\nexport default function EndScreen() {\n    const {score, setScore, setGameState} = useContext(QuizContext);\n    const restartQuiz = () => {\n        setScore(0);\n        setGameState(\"menu\")\n    }\n\n    const closeQuiz = () => {\n        setGameState('none')\n    }\n    return (\n        <div className='endScreen' style={{\n            position: 'absolute', left: '50%', top: '50%',\n            transform: 'translate(-50%, -50%)'\n        }}>\n            <h1>Quiz Complete! Nice work</h1>\n            <h3>{score} / {Questions.length} Correct!</h3>\n            <button onClick={() => restartQuiz() }>Restart Quiz</button>\n            <button onClick={() => closeQuiz() }>Close Quiz</button>\n        </div>\n    )\n}\n","import \"./App.css\";\nimport React, { useState, useContext, useEffect} from \"react\";\nimport MainMenu from \"./components/MainMenu\";\nimport Quiz from \"./components/Quiz\";\nimport EndScreen from \"./components/EndScreen\";\nimport { QuizContext } from \"./Helpers/Contexts\";\n\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Card from \"react-bootstrap/Card\";\nimport Image from \"react-bootstrap/Image\";\nimport Button from \"react-bootstrap/Button\";\n\nvar shuffle = require('shuffle-array')\n\nfunction App() {\n  const [gameState, setGameState] = useState(\"hidden\");\n  const [score, setScore] = useState(0);\n  const [scrambled, setScrambled] = useState(false);\n\n  const [termDefs, modifyTermDefs] = useState([\n    {term: \"interphase\", def: \"phase of the cell cycle where the cell grows, replicates DNA then grows again\" },\n    {term: \"chromosome\", def: \"the main ring of DNA in a prokaryotic cell or one of multiple structures made of DNA in a eukaryotic cell\" },\n    {term: \"mitosis\", def: \"cell division in a eukaryote that produces two new nuclei which each have the same number of chromosomes as the original cell\" }\n  ])\n\n  useEffect(() => {\n    const scrambled = termDefs.map(x => {\n       let original = x; \n       let scrambled = shuffle(x.def.split(' '))\n       original.scrambled = scrambled.join(' '); \n       return original;\n    })\n    modifyTermDefs(scrambled)\n  }, [])\n\n  const toggleScramble = () => {\n    setScrambled(!scrambled);\n  }\n  // Scramble text\n  // or flip througb multiple definitions and rate them, or add to another set!\n  // https://stackoverflow.com/questions/55518798/how-to-add-active-class-to-clicked-item-in-reactjs\n  // which is a good FITB candidate?\n  // # then order by length, game could be place the 2 masked words!  ___ and ___ are part of the [a) one word, b) another word]\n\n\n  return (\n    <div className=\"App\">\n      <h1>Unit Four Cell Cycle, Mitosis, and DNA</h1>\n      <Image src=\"https://via.placeholder.com/500x200\" fluid />\n\n\n      <Container>\n        <Row>\n          <Col >\n            <Button className=\"float-right\" \n                onClick = {() => toggleScramble()}>{scrambled ? 'Unscramble': 'Scramble'}\n            </Button>\n          </Col>\n        </Row>\n        {termDefs.map(t => (\n        <Row className=\"pt-5\">\n        <Col>\n          <Card style={{ width: 'auto', height:'8rem' }} className=\"mx-auto justify-content-center\">\n            <Card.Text  className=\"mx-auto p-2\"><h4>{t.term}</h4></Card.Text>\n            <Button onClick={() => setGameState('menu')} className=\"mx-auto\" style={{  width: '5rem', height:'2rem'}} variant=\"primary\">Drill</Button>\n          </Card>          \n        </Col>\n        <Col>\n        <Card style={{  width: 'auto', height:'8rem' }} className=\"mx-auto justify-content-center\" >\n        <Card.Text className=\"mx-auto p-2\">{scrambled ? t.scrambled : t.def}</Card.Text>\n            {scrambled ? \n              <Button className=\"mx-auto\" style={{  width: 'auto', height:'2rem'}} variant=\"primary\">Unscramble</Button> : null\n            }\n          </Card>            \n        </Col>\n      </Row>\n        ))}\n      </Container>\n\n      <QuizContext.Provider\n        value={{ gameState, setGameState, score, setScore }}\n      >\n        {gameState === \"menu\" && <MainMenu  />}\n        {gameState === \"quiz\" && <Quiz />}\n        {gameState === \"endScreen\" && <EndScreen />}\n      </QuizContext.Provider>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}